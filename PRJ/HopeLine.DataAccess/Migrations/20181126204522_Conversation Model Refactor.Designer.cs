// <auto-generated />
using System;
using HopeLine.DataAccess.DatabaseContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HopeLine.DataAccess.Migrations
{
    [DbContext(typeof(HopeLineDbContext))]
    [Migration("20181126204522_Conversation Model Refactor")]
    partial class ConversationModelRefactor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAdded");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("HopeLineUserId");

                    b.HasKey("Id");

                    b.HasIndex("HopeLineUserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Base.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAdded");

                    b.Property<string>("EndTime");

                    b.Property<int?>("ScheduleId");

                    b.Property<string>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAdded");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ImageURL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAdded");

                    b.Property<string>("DateOfConversation");

                    b.Property<string>("MentorAccountId");

                    b.Property<string>("MentorId")
                        .IsRequired();

                    b.Property<float>("Minutes");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MentorAccountId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.HopeLineUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("AccountType");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DateAdded")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("ProfileId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("ProfileId");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("HopeLineUser");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryOrigin")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("DateAdded");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAdded");

                    b.Property<double>("Radius");

                    b.Property<double>("XCoordinate");

                    b.Property<double>("YCoordinate");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.MentorSpecialization", b =>
                {
                    b.Property<string>("MentorAccountId");

                    b.Property<int>("SpecializationId");

                    b.Property<string>("DateAdded");

                    b.Property<int>("Id");

                    b.HasKey("MentorAccountId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("MentorSpecializations");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAdded");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.ProfileLanguage", b =>
                {
                    b.Property<int>("ProfileId");

                    b.Property<int>("LanguageId");

                    b.HasKey("ProfileId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ProfileLanguages");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAdded");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<string>("DateAdded");

                    b.Property<string>("MentorAccountId");

                    b.HasKey("Id");

                    b.HasIndex("MentorAccountId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAdded");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateAdded");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("SpecializationId");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.AdminAccount", b =>
                {
                    b.HasBaseType("HopeLine.DataAccess.Entities.HopeLineUser");


                    b.ToTable("AdminAccount");

                    b.HasDiscriminator().HasValue("AdminAccount");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.GuestAccount", b =>
                {
                    b.HasBaseType("HopeLine.DataAccess.Entities.HopeLineUser");


                    b.ToTable("GuestAccount");

                    b.HasDiscriminator().HasValue("GuestAccount");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.MentorAccount", b =>
                {
                    b.HasBaseType("HopeLine.DataAccess.Entities.HopeLineUser");

                    b.Property<string>("SIN");

                    b.Property<int?>("ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("MentorAccount");

                    b.HasDiscriminator().HasValue("MentorAccount");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.UserAccount", b =>
                {
                    b.HasBaseType("HopeLine.DataAccess.Entities.HopeLineUser");


                    b.ToTable("UserAccount");

                    b.HasDiscriminator().HasValue("UserAccount");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Activity", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.HopeLineUser")
                        .WithMany("Activities")
                        .HasForeignKey("HopeLineUserId");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Base.Shift", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.Schedule")
                        .WithMany("Shifts")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Conversation", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.MentorAccount")
                        .WithMany("Conversations")
                        .HasForeignKey("MentorAccountId");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.HopeLineUser", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.MentorSpecialization", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.MentorAccount", "MentorAccount")
                        .WithMany("MentorSpecializations")
                        .HasForeignKey("MentorAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HopeLine.DataAccess.Entities.Specialization", "Specialization")
                        .WithMany("MentorSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.ProfileLanguage", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.Language", "Language")
                        .WithMany("ProfileLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HopeLine.DataAccess.Entities.Profile", "Profile")
                        .WithMany("ProfileLanguages")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Schedule", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.MentorAccount")
                        .WithMany("Schedules")
                        .HasForeignKey("MentorAccountId");
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.Topic", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.Specialization")
                        .WithMany("Topics")
                        .HasForeignKey("SpecializationId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.HopeLineUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.HopeLineUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HopeLine.DataAccess.Entities.HopeLineUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.HopeLineUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HopeLine.DataAccess.Entities.MentorAccount", b =>
                {
                    b.HasOne("HopeLine.DataAccess.Entities.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");
                });
#pragma warning restore 612, 618
        }
    }
}
